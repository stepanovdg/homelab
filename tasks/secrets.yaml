version: '3'
vars:
  PATH_ERROR: is not installed or correctly configured in PATH.
  CLOUDFLARED_DEFAULT_PATH: /home/k3s/.cloudflared

silent: true

tasks:

  n8n:
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: n8n-vars
        namespace: services
      stringData:
        N8N_SMTP_HOST: "$SMTP_HOST"
        N8N_SMTP_PORT: "$SMTP_PORT"
        N8N_SMTP_USER: "$SMTP_USER"
        N8N_SMTP_PASS: "$SMTP_PASS"
        N8N_BASIC_AUTH_USER: "$N8N_BASIC_AUTH_USER"
        N8N_BASIC_AUTH_PASSWORD: "$N8N_BASIC_AUTH_PASSWORD"
        N8N_ENCRYPTION_KEY: "$N8N_ENCRYPTION_KEY"
        DB_POSTGRESDB_DATABASE: "$DB_POSTGRESDB_DATABASE"
        DB_POSTGRESDB_HOST: "$DB_POSTGRESDB_HOST"
        DB_POSTGRESDB_PORT: "$DB_POSTGRESDB_PORT"
      EOF
    ignore_error: true

  botkube:
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: botkube-vars
        namespace: monitoring
      stringData:
        comm_config.yaml: |
          communications:
              'default-group':
                slack:
                  enabled: false
                socketSlack:
                  enabled: false
                mattermost:
                  enabled: false
                teams:
                  enabled: false
                discord:
                  enabled: true
                  token: '$BOTKUBE_DISCORD_TOKEN'
                  botID: '$BOTKUBE_DISCORD_BOT_ID'
                  channels:
                    'default':
                      id: '$BOTKUBE_DISCORD_CHANNEL_ID'
                      notification:
                        disabled: false
                      bindings:
                        executors:
                          - kubectl-read-only
                        sources:
                          - k8s-err-events
                          - k8s-recommendation-events
                  notification:
                    type: short
                elasticsearch:
                  enabled: false
                webhook:
                  enabled: false
      EOF
    ignore_error: true

  kubeconfig:
    vars:
      KUBE:
        sh: cat $KUBECONFIG
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: botkube-kubeconfig
        namespace: monitoring
      data:
        config: {{ .KUBE | b64enc }}
      EOF
    ignore_error: true

  image-updater:
    vars:
      ARGOCD_TOKEN:
        sh: cat config/argo-token.yaml
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: argocd-image-updater-secret
        namespace: argocd
        labels:
          app.kubernetes.io/name: argocd-image-updater-secret
          app.kubernetes.io/part-of: argocd-image-updater
      type: Opaque
      data:
        argocd.token:  "{{ .ARGOCD_TOKEN | b64enc }}"
      EOF
    - kubectl apply -f config/argo-secret.yaml
    - kubectl -n argocd rollout restart deployment argocd-image-updater
    - rm config/argo-secret.yaml
    - rm test-argo-token.yaml
    ignore_error: true

  infra:
    cmds:
    - |
      kubectl apply -f - << EOF config/infra-secret.yaml
      apiVersion: v1
      kind: Secret
      metadata:
        name: infra-admin-credentials
        namespace: kube-system
      type: Opaque
      stringData:
        INFRA_ADMIN_PASSWORD: "$INFRA_ADMIN_PASSWORD"
        INFRA_CLUSTER_IP: "$INFRA_CLUSTER_IP"
        INFRA_ADMIN_KEY: "$INFRA_ADMIN_KEY"
        INFRA_ADMIN_USERNAME: "$INFRA_ADMIN_USERNAME"
      EOF
    ignore_error: true

  digitalocean:
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: digitalocean-token
        namespace: kube-system
        annotations:
          reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
          reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"
          reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: ""
      stringData:
        access-token: "$DIGITALOCEAN_ACCESS_TOKEN"
      EOF
    ignore_error: true

  sealed:
    cmds:
    - kubectl create namespace secrets
    - kubectl apply -k apps/monitoring/sealed-secrets
    ignore_error: true

  gen:
    cmds:
    - task: kubeconfig
    - task: infra
